<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>1000</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>randomize();


//player data

player_health = 30000

player_score = 0

//game vars

mode = 0;

game_active = true
game_over = false

game_over_col = c_red


//delta time stuff
music_bpm = 150

delta = 0

song_time = 0
song_max = room_speed

measure = 1
measure_max = 4
measure_trigger = false

beat = 1
beat_max = 4
beat_trigger = false

note = 1
note_max = 4
note_trigger = false

//block data

block_width_max = 64
block_height_max = 128
block_width_min = 32
block_height_min = 64

block_fall_speed = 7

block_grid_snap = 1

melt_speed = 0.5
off_side_melt_speed = 0.1

//colour stuff

number_of_colors = 2;
hue = random(255);

target_sat = 255;
sat = target_sat;
sat_smooth =10

val = 255;
hue_shift = 255 / number_of_colors;

global.box_type = 0;

col = 0;

//zone setup 

number_of_left_zones = 1;
number_of_right_zones = 1;
left_zone_width = 256;
right_zone_width = 256;

zone_y_offset = 0
zone_x_offset = 0
zone_height = room_height

left_zones = 0;
right_zones = 0;

zone_alpha = 0.4;

left_zones = sc_make_zones(number_of_left_zones,zone_height,left_zone_width,zone_y_offset,number_of_colors,0)
right_zones = sc_make_zones(number_of_right_zones,zone_height,right_zone_width,zone_y_offset,number_of_colors,1)



</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Delta time stuff

delta = 60/1000000*delta_time;

song_time += (music_bpm / room_speed) * delta

note_trigger = false
beat_trigger = false
measure_trigger = false

if (song_time &gt; song_max)
   {
   song_time -= song_max
   note_trigger = true
   note += 1
   }

if (note &gt; note_max)
   {
   note -= note_max
   beat_trigger = true
   beat += 1
   }
   
if (beat &gt; beat_max)
   {
   beat -= beat_max  
   measure_trigger = true
   measure += 1
   }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///make colors

if (game_active)
    {

    var i = 0;
    repeat(number_of_colors)
        {
        if (i = 0)
            {
            col[i] = make_colour_hsv(hue,sat,val)
            }
        else
            {
            col[i] = make_colour_hsv(hue + (hue_shift * i),sat,val)
            }
        i++;
        }
        
    sat += (target_sat - sat) / sat_smooth;

    
    if(note_trigger)
        {
        sat = 200
        }
    
    if(beat_trigger)
        {
        sat = 0
        }
    }
else if (game_over)
    {
    var i = 0;
    repeat(number_of_colors)
        {
        if (i = 0)
            {
            col[i] = game_over_col
            }
        else
            {
            col[i] = game_over_col
            }
        i++;
        }
    }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///spawn block

if (game_active)
    {    
    if (mode = 0)
        {
        if (beat_trigger)
            {
            var 
            obj, 
            block_type = floor(random(number_of_colors) - 0.01);
            if (block_type &lt; 0)
                {
                block_type = 0;
                }
                
            if (block_type &gt; number_of_colors - 1)
                {
                block_type = number_of_colors - 1;
                }
                
            var
            w = random_range(block_width_max,block_width_min),
            h = random_range(block_height_max,block_height_min) ;
            sc_create_block(room_width / 2, -200 ,block_fall_speed,0,w,h,false,0,block_type)    
            } 
        }
    }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///end game
if (player_health &lt;= 0)
    {
    game_active = false
    game_over = true
    while(instance_exists(o_block))
        {
        with(o_block)
            {
            event_user(0);
            }
        }
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_alpha(zone_alpha);

var i = 0;
repeat(array_height_2d(left_zones) )
    {
    draw_set_colour(sc_get_game_colors( left_zones[i,2] ));
    draw_rectangle(zone_x_offset,left_zones[i,0],zone_x_offset + left_zones[i,3],left_zones[i,1],false);
    ++i;
    }
    
i = 0    
repeat(array_height_2d(right_zones) )
    {
    draw_set_colour(sc_get_game_colors( right_zones[i,2] ));
    draw_rectangle(room_width - zone_x_offset,right_zones[i,0],(room_width - zone_x_offset) - right_zones[i,3],right_zones[i,1],false);
    ++i;
    }
        
draw_set_alpha(1);

if(debug_mode)
    {
    draw_set_color(c_black);
    draw_text(room_width/2,20,string(song_time) + "/" + string(song_max));
    draw_text(room_width/2,40,string(note) + "/" + string(note_max));
    draw_text(room_width/2,60,string(beat) + "/" + string(beat_max));
    draw_text(room_width/2,100,string(delta));
    }


</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
